name: Build Container Image

concurrency:
  group: ci-${{ github.run_id }}
  cancel-in-progress: true

on:
  #push:
  #  branches:
  #    - main
  #    - v[0-9]+
  #    - v[0-9]+.[0-9]+
  #    - cryostat-v[0-9]+.[0-9]+
  issues:
    types:
      - opened
      - edited
      - reopened
  pull_request_target:
    types:
      - opened
      - edited
      - reopened
      - labeled
      - synchronize

env:
  OPENSUSE_UNOFFICIAL_LIBCONTAINERS_KEY_URL: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_22.04/Release.key"
  OPENSUSE_UNOFFICIAL_LIBCONTAINERS_SOURCE_URL: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_22.04"
  CI_USER: miwan
  CI_REGISTRY: quay.io/miwan
  CI_IMG: quay.io/miwan/quarkus-test

jobs:
  check-before-build:
    runs-on: ubuntu-latest
    steps:
    - name: Fail if safe-to-test is not applied
      if: github.repository_owner == 'cryostatio' && (!contains(github.event.pull_request.labels.*.name, 'safe-to-test'))
      run: exit 1

  build-agent:
    runs-on: ubuntu-latest
    needs: [check-before-build]
    outputs: 
      image-version: ${{ steps.get-agent-version.outputs.agent-version }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - id: get-agent-version
      run: |
        echo "agent-version=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)" >> $GITHUB_OUTPUT
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
    - run: mvn -B -U clean install

  build-quarkus-test-app:
    needs: [build-agent]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ['17']
    permissions:
      packages: write
      contents: read
      pull-requests: write
      statuses: write
    outputs:
      image: ${{ steps.push-to-quay.outputs.image }}
    env:
      IMAGE_VERSION: ${{ needs.build-agent.outputs.image-version }}
    name: Build Java ${{ matrix.java }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'maven'
    - uses: actions/checkout@v4
      with:
        repository: mwangggg/quarkus-test
        ref: main
        submodules: true
        fetch-depth: 0
    - name: maven-settings
      uses: s4u/maven-settings-action@v2
      with:
        servers: '[{"id": "github", "username": "dummy", "password": "${{ secrets.GITHUB_TOKEN }}"}]'
        githubServer: false
    - name: Install podman v4
      run: |
        echo "deb $OPENSUSE_UNOFFICIAL_LIBCONTAINERS_SOURCE_URL/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list
        curl -fsSL $OPENSUSE_UNOFFICIAL_LIBCONTAINERS_KEY_URL | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_unstable.gpg > /dev/null
        sudo apt -y purge podman
        sudo apt update && sudo apt -y install podman
    - name: Emulate docker with podman
      run: |
        mkdir -p $HOME/.bin
        cat <(echo '#!/usr/bin/env bash') <(echo 'exec podman "$@"') > $HOME/.bin/docker
        chmod +x $HOME/.bin/docker
        echo "PATH=$HOME/.bin:$PATH" >> "$GITHUB_ENV"
    - name: Set up testcontainers for podman
      run: |
        echo ryuk.container.privileged=true > ~/.testcontainers.properties
        echo docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy >> ~/.testcontainers.properties
        echo testcontainers.reuse.enable=false >> ~/.testcontainers.properties
    - name: Start Podman API
      run: systemctl --user enable --now podman.socket
    - name: Set DOCKER_HOST environment variable
      run: echo "DOCKER_HOST=unix:///run/user/$(id -u)/podman/podman.sock" >> "$GITHUB_ENV"
    - name: Build application
      run: ./mvnw -B -U -Dio.cryostat.agent.version=${{ env.IMAGE_VERSION }} clean verify
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Build container images and manifest
      id: buildah-build
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.CI_IMG }}
        archs: amd64
        tags: ${{ env.IMAGE_VERSION }}
        containerfiles: |
          ./src/main/docker/Dockerfile.jvm
    - name: Push to quay.io
      id: push-to-quay
      uses: redhat-actions/push-to-registry@v2
      with:
        image: quarkus-test
        tags: ${{ steps.buildah-build.outputs.tags }}
        registry: ${{ env.CI_REGISTRY }}
        username: ${{ env.CI_USER }}
        password: ${{ secrets.QUAY_PASSWORD }}
    - name: store quarkus-test image as output
      id: quarkus-test-image
      run: echo "image=${{ steps.push-to-quay.outputs.registry-path }}" >> $GITHUB_OUTPUT

  comment-image:
    runs-on: ubuntu-latest
    needs: [build-quarkus-test-app]
    env:
      image: ${{ needs.build-quarkus-test-app.outputs.image }}
    permissions:
      pull-requests: write
    steps:
    - name: Create markdown table
      id: md-table
      uses: petems/csv-to-md-table-action@v3.0.0
      with:
        csvinput: |
          ARCH, IMAGE
          amd64, ${{ env.image }}
    - uses: thollander/actions-comment-pull-request@v2
      with:
        message: |-
          ${{ steps.md-table.outputs.markdown-table }}
